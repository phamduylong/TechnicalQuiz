@using Microsoft.AspNetCore.Mvc.TagHelpers
@model List<MultipleAnswersQuiz>
@{
	ViewData["Title"] = "Multi Answers Quizzes ❓";
	var rng = new Random();
}

<!-- Main card container -->
<div class="card">
	<div class="card-body">
		@{
			for (var i = 0; i < Model.Count; ++i)
			{
				<div class="card m-2">
					<div class="card-body">
						<div>
							<form>
								<p class="text-right position-absolute top-0 end-0 m-2" title="Quiz solved" id="completedMark" hidden>✅</p>
								<p class="h5">@(i + 1 + ". " + Model[i].Title)</p><br/>
								@{
									var inputs = Model[i].Options;
									// Combine options and answers to shuffle up
									inputs.AddRange(Model[i].Answers);
									var shuffledInputs = inputs.OrderBy(a => rng.Next()).ToList();
									foreach (var input in shuffledInputs)
									{
										<div class="form-check">
											<input class="form-check-input" type="checkbox" name="choices" value="@input" autocomplete="off">
											<label class="form-check-label">
												@input
											</label>
										</div>
									}
								}
							</form>
						</div>
					</div>
				</div>
			}
		}

		<div class="text-center">
			<button class="btn btn-primary m-4 active" id="submitBtn">Submit Answers</button>
		</div>

	</div>
</div>

<!-- Modal -->
<div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="resultText"></h5>
				<button type="button" class="close modalCloseBtn" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body" id="result-modal-body">
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary modalCloseBtn">Close</button>
			</div>
		</div>
	</div>
</div>

<script>
	const quizzes = @Html.Raw(Json.Serialize(Model));
	const quiz_forms = document.querySelectorAll("form");
	const modalBody = document.getElementById("result-modal-body");
	const resultText = document.getElementById("resultText");
	const submitBtn = document.getElementById("submitBtn");
	const completedQuizzes = Array(quizzes.length).fill(false);
	// fix this event listener, only works for radio group for now
	submitBtn.addEventListener(
		"click",
		async () => {
			// reset modal content in case of resubmitted answers
			modalBody.innerHTML = "";
			quiz_forms.forEach(async (form, i) => {
				const submittedAnswers = [];
				const data = await new FormData(quiz_forms[i]);
				for (const entry of data.values()) {
					// iterate through answers and record them
					submittedAnswers.push(entry);
				}
				if (!completedQuizzes[i]) {
					if (haveSameContents(submittedAnswers, quizzes[i].answers)) {
						completedQuizzes[i] = true;
						Array.from(form.elements).forEach((input) => {
							input.disabled = true;
						});
						form.querySelector("#completedMark").hidden = false;
					}
				} 
				if (i === quiz_forms.length - 1) {
					// update the result only in the last loop iteration
					const correctCount = completedQuizzes.filter((qc) => qc === true).length;
					resultText.innerText = `Result: You answered ${correctCount}/${quizzes.length} correctly ✨`;
			
					completedQuizzes.forEach((completed, j) => {
						if (completed) {
							modalBody.innerHTML +=
								`<div class="card m-2 bg-success text-white">
									<div class="card-body">
										${j + 1}. Correct
									</div>
								</div>`;
						} else {
							modalBody.innerHTML += 
								`<div class="card m-2 bg-danger text-white">
									<div class="card-body">
										${j + 1}. Incorrect
									</div>
								</div>`;
						}
					});
				}
			});
			$('#modal').modal('show');
		});

	document.querySelectorAll(".modalCloseBtn").
		forEach(btn => {
			btn.addEventListener(
				"click",
				async () => {
					$('#modal').modal('hide');
					quiz_forms.forEach((form, i) => {
						if (!completedQuizzes[i]) {
							form.reset();
						}
					});
				});
		});


</script>
